profiles{
    gls {
    process.executor = 'google-lifesciences'
    workDir = 'gs://mhra-ngs-dev-0yzc-nextflow/testing-work'
    google.location = 'europe-west2'
    google.region  = 'europe-west2'
    google.project = 'mhra-ngs-dev-0yzc'
    google.lifeSciences.network = "mhra-ngs-dev-0yzc-network"
    google.lifeSciences.serviceAccountEmail="nextflow-vm@mhra-ngs-dev-0yzc.iam.gserviceaccount.com"
    google.lifeSciences.subnetwork = 'mhra-ngs-dev-eu-west2-1'
    google.lifeSciences.preemptible = 'true'
    process.publishDir = 'gs://mhra-ngs-dev-0yzc-nextflow/output/'
    google.lifeSciences.bootDiskSize = 250.GB
    }
}
trace {
  enabled = true
  file = "pipeline_execution_trace.txt"
  fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,syscr,syscw,read_bytes,write_bytes'
}
tower {
  enabled = true
  accessToken = 'eyJ0aWQiOiA0Njc0fS5lMGI1NDg5NGJlYTExOWVhZmY3YzU4ZDhmYmUwMDA4NWRlYTZiMDJl'
}
params {
  max_memory = 5000.GB
  max_time = 240.h
  max_cpus = 16
  singleCPUMem = 6.5.GB
}

process{
  machineType = 'n1-standard-4'
  // machineType = 'n2-highmem-32'
  cpus = 4
  memory = 15.GB
  // disk = '100 GB'
  errorStrategy = {task.exitStatus in [1,9,10,143,137,104,134,139,247] ? 'retry' : 'finish'}
    maxErrors = '-1'
    maxRetries = 5

  withName:BWAMEM2_MEM  {
    machineType = 'custom-20-81920'
    memory = {check_resource(60.GB * task.attempt)}
    time = {check_resource(48.h * task.attempt)}
    disk = '1000 GB'
  }
  
  withName:BWAMEM2_INDEX  {
    machineType = 'custom-20-81920'
    memory = {check_resource(60.GB * task.attempt)}
    time = {check_resource(48.h * task.attempt)}
    disk = '1000 GB'
  }

  withName:FastQCFQ {
    machineType = 'n1-standard-4'
  }

  withName:BamQC {
    machineType = 'n1-highmem-16'
  }

  withName:PICARD_MARKDUPLICATES  {
    machineType = 'n1-highmem-2'
    cpus = {check_resource(2)}
    memory = 13.GB
    disk = '2048 GB'
  }
  
  withName:PICARD_SORTSAM_ALIGNED  {
    machineType = 'n1-highmem-2'
    cpus = {check_resource(2)}
    memory = 13.GB
    disk = '2048 GB'
  }
  
  withName:PICARD_SORTSAM_DUPLICATESMARKED  {
    machineType = 'n1-highmem-2'
    cpus = {check_resource(2)}
    memory = 13.GB
    disk = '2048 GB'
  }
  
  withName:GATK4_BASERECALIBRATOR {
  machineType = 'n1-highmem-2'
  cpus = {check_resource(2)}
  memory = 13.GB
  }

  withName:GATK4_APPLYBQSR  {
  machineType = 'n1-highmem-4'
  cpus = {check_resource(4)}
  memory = 26.GB
  }
  
  withName:GATK4_VARIANTRECALIBRATOR_SNP {
  machineType = 'n1-highmem-2'
  cpus = {check_resource(2)}
  memory = 13.GB
  }

  withName:GATK4_APPLYVQSR_SNP  {
  machineType = 'n1-highmem-4'
  cpus = {check_resource(4)}
  memory = 26.GB
  }
  
  withName:GATK4_VARIANTRECALIBRATOR_INDEL {
  machineType = 'n1-highmem-2'
  cpus = {check_resource(2)}
  memory = 13.GB
  }

  withName:GATK4_APPLYVQSR_INDEL  {
  machineType = 'n1-highmem-4'
  cpus = {check_resource(4)}
  memory = 26.GB
  }

  withName:GATK4_GENOMICSDBIMPORT  {
  machineType = 'n1-highmem-4'
  cpus = {check_resource(4)}
  memory = 26.GB
  }

  withName:GATK4_GENOTYPEGVCFS {
    machineType = 'n1-standard-4'
    cpus = {check_resource(4)}
    memory = 15.GB
    disk = '1000 GB'
  }
  withName:GATK4_HAPLOTYPECALLER {
    machineType = 'n1-standard-4'
    cpus = {check_resource(4)}
    memory = 15.GB
    disk = '1000 GB'
  }
}

def check_resource(obj) {
    try {
      if (obj.getClass() == nextflow.util.MemoryUnit && obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else if (obj.getClass() == nextflow.util.Duration && obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else if (obj.getClass() == java.lang.Integer)
        return Math.min(obj, params.max_cpus as int)
      else
        return obj
    } catch (all) {
        println "   ### ERROR ###   Max params max_memory:'${params.max_memory}', max_time:'${params.max_time}' or max_cpus:'${params.max_cpus}'  is not valid! Using default value: $obj"
    }
}
